-- Objective of these tests is to ensure if IndexScan is being picked up when order by clause has columns that match
-- prefix of any existing btree indices. This is for queries with both order by and a limit.
-- Tests for queries with order by and limit on B-tree indices.
CREATE TABLE test_index_with_orderby_limit (a int, b int, c float, d int);
CREATE INDEX index_a on test_index_with_orderby_limit using btree(a);
CREATE INDEX index_ab on test_index_with_orderby_limit using btree(a, b);
CREATE INDEX index_bda on test_index_with_orderby_limit using btree(b, d, a);
INSERT INTO test_index_with_orderby_limit select i, i-2, i/3, i+1 from generate_series(1,10000) i;
ANALYZE test_index_with_orderby_limit;
-- should use index scan
explain (costs off) select * from test_index_with_orderby_limit order by a limit 10;
                                 QUERY PLAN
-----------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Limit
               ->  Index Scan using index_a on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by c limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: c
         ->  Limit
               ->  Sort
                     Sort Key: c
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- should use index scan
explain (costs off) select * from test_index_with_orderby_limit order by b limit 10;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: b
         ->  Limit
               ->  Index Scan using index_bda on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- should use index scan
explain (costs off) select * from test_index_with_orderby_limit order by a, b limit 10;
                                  QUERY PLAN
------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a, b
         ->  Limit
               ->  Index Scan using index_ab on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- should use index scan
explain (costs off) select * from test_index_with_orderby_limit order by b, d limit 10;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: b, d
         ->  Limit
               ->  Index Scan using index_bda on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by d, b limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: d, b
         ->  Limit
               ->  Sort
                     Sort Key: d, b
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by d, a limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: d, a
         ->  Limit
               ->  Sort
                     Sort Key: d, a
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by a, c limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a, c
         ->  Limit
               ->  Sort
                     Sort Key: a, c
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- should use index scan
explain (costs off) select * from test_index_with_orderby_limit order by b, d, a limit 10;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: b, d, a
         ->  Limit
               ->  Index Scan using index_bda on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by b, d, c limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: b, d, c
         ->  Limit
               ->  Sort
                     Sort Key: b, d, c
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- should use seq scan
explain (costs off) select * from test_index_with_orderby_limit order by c, b, a limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: c, b, a
         ->  Limit
               ->  Sort
                     Sort Key: c, b, a
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- with offset and without limit
explain (costs off) select * from test_index_with_orderby_limit order by a offset 10;
                              QUERY PLAN
-----------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Index Scan using index_a on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(5 rows)

-- limit value in subquery
explain (costs off) select * from test_index_with_orderby_limit order by a limit (select min(a) from test_index_with_orderby_limit);
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Limit
   InitPlan 2 (returns $1)  (slice2)
     ->  Result
           InitPlan 1 (returns $0)  (slice3)
             ->  Limit
                   ->  Gather Motion 3:1  (slice4; segments: 3)
                         Merge Key: test_index_with_orderby_limit_1.a
                         ->  Index Only Scan using index_a on test_index_with_orderby_limit test_index_with_orderby_limit_1
                               Index Cond: (a IS NOT NULL)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: test_index_with_orderby_limit.a
         ->  Limit
               ->  Index Scan using index_a on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(14 rows)

-- offset value in a subquery
explain (costs off) select * from test_index_with_orderby_limit order by c offset (select min(a) from test_index_with_orderby_limit);
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Limit
   InitPlan 2 (returns $1)  (slice2)
     ->  Result
           InitPlan 1 (returns $0)  (slice3)
             ->  Limit
                   ->  Gather Motion 3:1  (slice4; segments: 3)
                         Merge Key: test_index_with_orderby_limit_1.a
                         ->  Index Only Scan using index_a on test_index_with_orderby_limit test_index_with_orderby_limit_1
                               Index Cond: (a IS NOT NULL)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: test_index_with_orderby_limit.c
         ->  Sort
               Sort Key: test_index_with_orderby_limit.c
               ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(15 rows)

-- order by opposite to index sort direction
explain (costs off) select * from test_index_with_orderby_limit order by a desc limit 10;
                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Limit
               ->  Index Scan Backward using index_a on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- order by opposite to nulls direction in index
explain (costs off) select * from test_index_with_orderby_limit order by a NULLS FIRST limit 10;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Limit
               ->  Sort
                     Sort Key: a NULLS FIRST
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- order by as sum of two columns, uses SeqScan with Sort
explain (costs off) select a, b from test_index_with_orderby_limit order by a+b, c limit 3;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: ((a + b)), c
         ->  Limit
               ->  Sort
                     Sort Key: ((a + b)), c
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

explain (costs off) select a+b as sum from test_index_with_orderby_limit order by sum limit 3;
                            QUERY PLAN
-------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: ((a + b))
         ->  Limit
               ->  Sort
                     Sort Key: ((a + b))
                     ->  Seq Scan on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(8 rows)

-- order by using column number
explain (costs off) select * from test_index_with_orderby_limit order by 1 limit 3;
                                 QUERY PLAN
-----------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Limit
               ->  Index Scan using index_a on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

-- check if index-only scan is leveraged when required
-- vacuum table to ensure IndexOnly Scan is picked
VACUUM test_index_with_orderby_limit;
-- project only columns in the Index
explain (costs off) select a from test_index_with_orderby_limit order by a limit 10;
                                    QUERY PLAN
-----------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: a
         ->  Limit
               ->  Index Only Scan using index_ab on test_index_with_orderby_limit
 Optimizer: Postgres query optimizer
(6 rows)

DROP TABLE test_index_with_orderby_limit;
